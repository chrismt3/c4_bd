
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

st.set_page_config(page_title="Recomendador de Pel√≠culas - Arquitectura Lambda", layout="wide")

# -----------------------
# Datos simulados (Capa Batch)
# -----------------------
st.title("üé¨ Recomendador de Pel√≠culas con Arquitectura Lambda")
st.caption("Simulaci√≥n educativa: Capa Batch + Capa de Velocidad + Capa de Servicio")

movies = ["Matrix", "Avatar", "Titanic", "Inception", "Joker", "Toy Story", "Interstellar"]
users = ["Ana", "Luis", "Carlos", "Mar√≠a"]

ratings = pd.DataFrame(
    np.random.randint(1, 6, size=(len(users), len(movies))),
    index=users,
    columns=movies
)

st.subheader("üß© Capa Batch - Calificaciones Hist√≥ricas")
st.write("La capa batch procesa los datos hist√≥ricos de los usuarios para construir un modelo base.")
st.dataframe(ratings)

# Entrenamiento batch (modelo de similitud)
similarity = pd.DataFrame(
    cosine_similarity(ratings.T),
    index=movies,
    columns=movies
)

st.subheader("ü§ñ Modelo Batch - Similitud entre pel√≠culas")
st.write("Calculado mediante similitud coseno entre pel√≠culas basadas en las calificaciones.")
st.dataframe(similarity.round(2))

# -----------------------
# Capa de Velocidad (Simulaci√≥n de nuevos datos)
# -----------------------
st.header("‚ö° Capa de Velocidad - Ingreso en Tiempo Real")

user = st.selectbox("Selecciona un usuario:", users)
movie = st.selectbox("Selecciona una pel√≠cula:", movies)
rating = st.slider("Nueva calificaci√≥n", 1, 5, 3)

if st.button("‚ûï Agregar Calificaci√≥n"):
    ratings.loc[user, movie] = rating
    st.success(f"‚úÖ {user} calific√≥ '{movie}' con {rating} estrellas.")
    similarity = pd.DataFrame(
        cosine_similarity(ratings.T),
        index=movies,
        columns=movies
    )

# -----------------------
# Capa de Servicio (Fusi√≥n de resultados)
# -----------------------
st.header("üõ∞Ô∏è Capa de Servicio - Recomendaciones Actualizadas")

selected_movie = st.selectbox("Selecciona una pel√≠cula base:", movies)
recommendations = similarity[selected_movie].sort_values(ascending=False)[1:4]

st.write("üîç Pel√≠culas similares a:", selected_movie)
st.dataframe(recommendations.round(2), use_container_width=True)

st.info("üí° Cada nueva calificaci√≥n actualiza la matriz de similitud y las recomendaciones al instante.")
